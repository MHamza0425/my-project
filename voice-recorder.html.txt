<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Voice Recorder - All Tools Hub</title>
  <meta name="description" content="Record your voice directly from the browser and download it.">
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 dark:bg-gray-900 text-gray-800 dark:text-gray-100 font-sans">

<!-- Header -->
<header class="bg-white dark:bg-gray-800 shadow fixed w-full z-50">
  <div class="max-w-7xl mx-auto flex justify-between items-center px-6 py-4">
    <h1 class="text-2xl font-bold text-indigo-600 dark:text-indigo-400 cursor-pointer" onclick="window.location.href='index.html'">All Tools Hub</h1>
    <nav class="hidden md:flex gap-6 text-sm font-medium">
      <a href="index.html#about" class="hover:text-indigo-600 dark:hover:text-indigo-400 transition">About</a>
      <a href="index.html#tools" class="hover:text-indigo-600 dark:hover:text-indigo-400 transition">Tools</a>
      <a href="contact.html" class="hover:text-indigo-600 dark:hover:text-indigo-400 transition">Contact</a>
      <a href="privacy.html" class="hover:text-indigo-600 dark:hover:text-indigo-400 transition">Privacy</a>
      <a href="terms.html" class="hover:text-indigo-600 dark:hover:text-indigo-400 transition">Terms</a>
    </nav>
    <div class="flex items-center gap-3">
      <button id="darkToggle" class="text-sm px-3 py-1 border rounded hover:bg-gray-200 dark:hover:bg-gray-700">ðŸŒ™</button>
      <button id="mobileMenuBtn" class="md:hidden text-2xl">â˜°</button>
    </div>
  </div>

  <!-- Mobile Menu -->
  <div id="mobileMenu" class="hidden md:hidden bg-white dark:bg-gray-800 border-t text-center py-2 space-y-2">
    <a href="index.html#about" class="block hover:text-indigo-600 dark:hover:text-indigo-400">About</a>
    <a href="index.html#tools" class="block hover:text-indigo-600 dark:hover:text-indigo-400">Tools</a>
    <a href="contact.html" class="block hover:text-indigo-600 dark:hover:text-indigo-400">Contact</a>
    <a href="privacy.html" class="block hover:text-indigo-600 dark:hover:text-indigo-400">Privacy</a>
    <a href="terms.html" class="block hover:text-indigo-600 dark:hover:text-indigo-400">Terms</a>
  </div>
</header>

<!-- Voice Recorder Section -->
<section class="pt-32 pb-16 px-6 max-w-md mx-auto text-center">
  <h2 class="text-3xl font-bold text-indigo-700 dark:text-indigo-400 mb-6">Voice Recorder</h2>
  <p class="text-gray-600 dark:text-gray-300 mb-6">Record your voice and download the audio file.</p>

  <div class="bg-white dark:bg-gray-800 rounded-xl shadow-md p-6 space-y-4">
    <button id="recordBtn" class="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700 transition">Start Recording</button>
    <button id="stopBtn" class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition" disabled>Stop Recording</button>

    <audio id="audioPlayback" controls class="w-full mt-4 hidden"></audio>
    <a id="downloadLink" class="block mt-2 text-indigo-600 dark:text-indigo-400 font-medium hidden">Download Recording</a>
  </div>
</section>

<!-- Footer -->
<footer class="bg-gray-900 text-gray-300 py-6 text-center">
  Â© 2025 All Tools Hub. All rights reserved.
</footer>

<script>
  // Dark mode toggle
  document.getElementById("darkToggle").addEventListener("click", () => {
    document.body.classList.toggle("dark");
  });

  // Mobile menu toggle
  document.getElementById("mobileMenuBtn").addEventListener("click", () => {
    document.getElementById("mobileMenu").classList.toggle("hidden");
  });

  // Voice Recorder Logic
  let mediaRecorder;
  let audioChunks = [];
  const recordBtn = document.getElementById("recordBtn");
  const stopBtn = document.getElementById("stopBtn");
  const audioPlayback = document.getElementById("audioPlayback");
  const downloadLink = document.getElementById("downloadLink");

  recordBtn.addEventListener("click", async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorder = new MediaRecorder(stream);
      audioChunks = [];

      mediaRecorder.addEventListener("dataavailable", event => {
        audioChunks.push(event.data);
      });

      mediaRecorder.addEventListener("stop", () => {
        const audioBlob = new Blob(audioChunks, { type: "audio/mp3" });
        const audioUrl = URL.createObjectURL(audioBlob);
        audioPlayback.src = audioUrl;
        audioPlayback.classList.remove("hidden");

        downloadLink.href = audioUrl;
        downloadLink.download = "recording.mp3";
        downloadLink.classList.remove("hidden");
      });

      mediaRecorder.start();
      recordBtn.disabled = true;
      stopBtn.disabled = false;
    } catch (err) {
      alert("Microphone access denied or not supported.");
    }
  });

  stopBtn.addEventListener("click", () => {
    mediaRecorder.stop();
    recordBtn.disabled = false;
    stopBtn.disabled = true;
  });
</script>

</body>
</html>
